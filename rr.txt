calculator

import java.rmi.Remote;
import java.rmi.RemoteException;

public interface Calculator extends Remote {
    int mul(int a, int b) throws RemoteException;
}

calculatorimpl

import java.rmi.server.UnicastRemoteObject;
import java.rmi.RemoteException;

public class CalculatorImpl extends UnicastRemoteObject implements Calculator {
    protected CalculatorImpl() throws RemoteException {
        super();
    }

    @Override
    public int mul(int a, int b) throws RemoteException {
        return a * b;
    }
}


calculatorserver

import java.rmi.Naming;
import java.rmi.registry.LocateRegistry;

public class RMIServer {
    public static void main(String[] args) {
        try {
            System.setProperty("java.rmi.server.hostname", "192.168.14.128");
            LocateRegistry.createRegistry(4444);
            CalculatorImpl obj = new CalculatorImpl();
            Naming.rebind("rmi://192.168.14.128:4444/CalculatorService", obj);
            System.out.println("RMI Server is running...");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

calculator client
import java.rmi.Naming;
import java.util.*;

public class RMIClient {
    public static void main(String[] args) {
        try {
            Calculator service = (Calculator) Naming.lookup("rmi://192.168.163.128:4444/CalculatorService");
            Scanner scan= new Scanner(System.in);
            System.out.println("Enter Multiplicant: ");
            int num1=scan.nextInt();
            System.out.println("Enter Multiplyer: ");
            int num2=scan.nextInt();

            int result = service.mul(num1, num2);
            System.out.println("Result of multiplication: " + result);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



rpc

rpcserver

import org.apache.xmlrpc.webserver.WebServer;
import org.apache.xmlrpc.server.XmlRpcServer;
import org.apache.xmlrpc.server.PropertyHandlerMapping;

public class JavaServer { 

   public Integer sum(int x, int y){
      return Integer.valueOf(x + y);
   }

   public String getCurrentTime(){
      return java.time.LocalDateTime.now().toString();
   }

   public static void main (String [] args){
   
      try {

         System.out.println("Attempting to start XML-RPC Server...");
         
         WebServer server = new WebServer(80);
         XmlRpcServer xmlRpcServer = server.getXmlRpcServer();
         PropertyHandlerMapping phm = new PropertyHandlerMapping();
         phm.addHandler("sample", JavaServer.class);
         xmlRpcServer.setHandlerMapping(phm);
         server.start();
         
         System.out.println("Started successfully.");
         System.out.println("Accepting requests. (Halt program to stop.)");
         
      } catch (Exception exception){
         System.err.println("JavaServer: " + exception);
      }
   }
}

rpc client

import java.util.*;
import org.apache.xmlrpc.client.XmlRpcClient;
import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;

public class JavaClient {
   public static void main (String [] args) {
   
      try {
         XmlRpcClientConfigImpl config = new XmlRpcClientConfigImpl();
         config.setServerURL(new java.net.URL("http://<ip-addr-of-windows>:80/RPC2")); //change the ip-address here
         XmlRpcClient client = new XmlRpcClient();
         client.setConfig(config);

         Object result = client.execute("sample.getCurrentTime", new Vector<>());

         String currentTime = (String) result;
         System.out.println("The current time is: " + currentTime);

      } catch (Exception exception) {
         System.err.println("JavaClient: " + exception);
      }
   }
}
